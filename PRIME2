def generate_public_key(prime, base, private_key):
    return pow(base, private_key, prime)

def generate_shared_secrete(public_key, private_key, prime):
    return pow(public_key, private_key, prime)

# Input prime number and base
prime = int(input("Enter a large prime number (recommended â‰¥2048 bits): "))
base = int(input("Enter a base (primitive root modulo the prime): "))

# Alice's private and public key
alice_private = int(input("Enter your private key (a random integer less than prime): "))
alice_public = generate_public_key(prime, base, alice_private)
print("Alice public key:", alice_public)

# Bob's private and public key
bobs_private = int(input("Enter your private key (a random integer less than prime): "))
bobs_public = generate_public_key(prime, base, bobs_private)
print("Bob's public key:", bobs_public)

# Shared secret computation
alice_shared = generate_shared_secrete(bobs_public, alice_private, prime)
bobs_shared = generate_shared_secrete(alice_public, bobs_private, prime)

print("Alice's shared key:", alice_shared)
print("Bob's shared key:", bobs_shared)

# Verify if the shared keys match
if alice_shared == bobs_shared:
    print("Success! The shared key is:", alice_shared)
else:
    print("Error: Shared keys don't match.")
