from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import serialization

# Generate private key and derive public key
private_key = ec.generate_private_key(ec.SECP256R1())
public_key = private_key.public_key()

# Serialize public key to PEM format
public_pem = public_key.public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.SubjectPublicKeyInfo
)
print("Public key PEM format:\n", public_pem.decode())

# Input a message to be signed
message = input("Enter a message to be signed: ").encode()

# Sign the message with the private key
signature = private_key.sign(message, ec.ECDSA(hashes.SHA256()))
print("Signature:", signature)

# Verify the signature using the public key
try:
    public_key.verify(signature, message, ec.ECDSA(hashes.SHA256()))
    print("Signature is valid")
except:
    print("Signature is failed")
